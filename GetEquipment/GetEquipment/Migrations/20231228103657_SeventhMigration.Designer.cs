// <auto-generated />
using System;
using GetEquipment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GetEquipment.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231228103657_SeventhMigration")]
    partial class SeventhMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("GetEquipment.Model.Appoitment", b =>
                {
                    b.Property<Guid>("appointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkCalendarcalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dateAndTimeOfAppointment")
                        .HasColumnType("datetime2");

                    b.Property<int>("durationH")
                        .HasColumnType("int");

                    b.Property<bool>("isReserved")
                        .HasColumnType("bit");

                    b.HasKey("appointmentId");

                    b.HasIndex("WorkCalendarcalendarId");

                    b.ToTable("Appoitments");
                });

            modelBuilder.Entity("GetEquipment.Model.Company", b =>
                {
                    b.Property<Guid>("companyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("averageRating")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("companyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GetEquipment.Model.Equipment", b =>
                {
                    b.Property<Guid>("equipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("averageRating")
                        .HasColumnType("float");

                    b.Property<Guid>("companyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("equipmentType")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("equipmentID");

                    b.HasIndex("companyID");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("GetEquipment.Model.User", b =>
                {
                    b.Property<Guid>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isVerified")
                        .HasColumnType("bit");

                    b.Property<string>("lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("penalty")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("userID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GetEquipment.Model.WorkCalendar", b =>
                {
                    b.Property<Guid>("calendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("companyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("calendarId");

                    b.HasIndex("companyId")
                        .IsUnique();

                    b.ToTable("WorkCalendars");
                });

            modelBuilder.Entity("GetEquipment.Model.Appoitment", b =>
                {
                    b.HasOne("GetEquipment.Model.WorkCalendar", null)
                        .WithMany("appoitments")
                        .HasForeignKey("WorkCalendarcalendarId");
                });

            modelBuilder.Entity("GetEquipment.Model.Equipment", b =>
                {
                    b.HasOne("GetEquipment.Model.Company", null)
                        .WithMany("equipmentInStock")
                        .HasForeignKey("companyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetEquipment.Model.WorkCalendar", b =>
                {
                    b.HasOne("GetEquipment.Model.Company", null)
                        .WithOne("workCalendar")
                        .HasForeignKey("GetEquipment.Model.WorkCalendar", "companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetEquipment.Model.Company", b =>
                {
                    b.Navigation("equipmentInStock");

                    b.Navigation("workCalendar");
                });

            modelBuilder.Entity("GetEquipment.Model.WorkCalendar", b =>
                {
                    b.Navigation("appoitments");
                });
#pragma warning restore 612, 618
        }
    }
}
